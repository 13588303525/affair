<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.zucc.affair.dao.EvectionMapper" >
  <resultMap id="BaseResultMap" type="cn.zucc.affair.pojo.Evection" >
    <id column="e_id" property="eId" jdbcType="INTEGER" />
    <result column="pg_id" property="pgId" jdbcType="INTEGER" />
    <result column="u_id" property="uId" jdbcType="INTEGER" />
    <result column="m_id" property="mId" jdbcType="INTEGER" />
    <result column="ep_id" property="epId" jdbcType="INTEGER" />
    <result column="c_cost" property="cCost" jdbcType="DOUBLE" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    e_id, pg_id, u_id, m_id, ep_id, c_cost
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.zucc.affair.pojo.EvectionExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from evection
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from evection
    where e_id = #{eId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from evection
    where e_id = #{eId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.zucc.affair.pojo.EvectionExample" >
    delete from evection
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.zucc.affair.pojo.Evection" >
    insert into evection (e_id, pg_id, u_id, 
      m_id, ep_id, c_cost)
    values (#{eId,jdbcType=INTEGER}, #{pgId,jdbcType=INTEGER}, #{uId,jdbcType=INTEGER}, 
      #{mId,jdbcType=INTEGER}, #{epId,jdbcType=INTEGER}, #{cCost,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="cn.zucc.affair.pojo.Evection" >
    insert into evection
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="eId != null" >
        e_id,
      </if>
      <if test="pgId != null" >
        pg_id,
      </if>
      <if test="uId != null" >
        u_id,
      </if>
      <if test="mId != null" >
        m_id,
      </if>
      <if test="epId != null" >
        ep_id,
      </if>
      <if test="cCost != null" >
        c_cost,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="eId != null" >
        #{eId,jdbcType=INTEGER},
      </if>
      <if test="pgId != null" >
        #{pgId,jdbcType=INTEGER},
      </if>
      <if test="uId != null" >
        #{uId,jdbcType=INTEGER},
      </if>
      <if test="mId != null" >
        #{mId,jdbcType=INTEGER},
      </if>
      <if test="epId != null" >
        #{epId,jdbcType=INTEGER},
      </if>
      <if test="cCost != null" >
        #{cCost,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.zucc.affair.pojo.EvectionExample" resultType="java.lang.Integer" >
    select count(*) from evection
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update evection
    <set >
      <if test="record.eId != null" >
        e_id = #{record.eId,jdbcType=INTEGER},
      </if>
      <if test="record.pgId != null" >
        pg_id = #{record.pgId,jdbcType=INTEGER},
      </if>
      <if test="record.uId != null" >
        u_id = #{record.uId,jdbcType=INTEGER},
      </if>
      <if test="record.mId != null" >
        m_id = #{record.mId,jdbcType=INTEGER},
      </if>
      <if test="record.epId != null" >
        ep_id = #{record.epId,jdbcType=INTEGER},
      </if>
      <if test="record.cCost != null" >
        c_cost = #{record.cCost,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update evection
    set e_id = #{record.eId,jdbcType=INTEGER},
      pg_id = #{record.pgId,jdbcType=INTEGER},
      u_id = #{record.uId,jdbcType=INTEGER},
      m_id = #{record.mId,jdbcType=INTEGER},
      ep_id = #{record.epId,jdbcType=INTEGER},
      c_cost = #{record.cCost,jdbcType=DOUBLE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zucc.affair.pojo.Evection" >
    update evection
    <set >
      <if test="pgId != null" >
        pg_id = #{pgId,jdbcType=INTEGER},
      </if>
      <if test="uId != null" >
        u_id = #{uId,jdbcType=INTEGER},
      </if>
      <if test="mId != null" >
        m_id = #{mId,jdbcType=INTEGER},
      </if>
      <if test="epId != null" >
        ep_id = #{epId,jdbcType=INTEGER},
      </if>
      <if test="cCost != null" >
        c_cost = #{cCost,jdbcType=DOUBLE},
      </if>
    </set>
    where e_id = #{eId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zucc.affair.pojo.Evection" >
    update evection
    set pg_id = #{pgId,jdbcType=INTEGER},
      u_id = #{uId,jdbcType=INTEGER},
      m_id = #{mId,jdbcType=INTEGER},
      ep_id = #{epId,jdbcType=INTEGER},
      c_cost = #{cCost,jdbcType=DOUBLE}
    where e_id = #{eId,jdbcType=INTEGER}
  </update>
</mapper>